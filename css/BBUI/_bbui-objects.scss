/*
@name objects

@guide
Objects are the big picture, the final piece
and they should be able to stand alone without help.
All of an object's __elements and --modifiers should be placed
here with them.
When creating new objects, I recommend creating a SASS map along
with them to provide customization in the future.
*/




/*------------------------------------*\
    #LOAD-BAR
\*------------------------------------*/



/*
@description
Functionality for this is in _bbjs-utilities.js

@example [HTML]
<div class="load-bar" role="progressbar"></div>
*/

.load-bar{
    position: fixed;
    top:  0;
    left: 0;
    z-index: map-get($z-index, "max");
    background-color: map-get($color, "black");
    height: 3px;
    transition: width map-get($transition-speed, "medium") map-get($transition-type, "ease");
    pointer-events: none;

    // Most mobile browser's have a load bar by default.
    @include touch{
        display: none;
    }
}


.load-bar--loaded{
    opacity: 0;
}





/*------------------------------------*\
    #ICONS
\*------------------------------------*/



/*
@example [HTML]
<div class="menu-icon">
    <div class="menu-icon__line"></div>
    <div class="menu-icon__line"></div>
    <div class="menu-icon__line"></div>
</div>
*/

.menu-icon{
    width: map-get($hamburger, "width");
    padding: map-get($hamburger, "padding");
    cursor: pointer;
}


.menu-icon__line{
    background-color: map-deep-get($hamburger, "line" "background-color");
    height: map-deep-get($hamburger, "line" "height");
    margin-top: map-deep-get($hamburger, "line" "spacing");
    display: block;

    &:nth-of-type(1){
        margin-top: 0;
    }
}



.close-icon{

    &:after{
        content: map-deep-get($close-icon, "icon" "symbol");
        display: block;
    }
}


.closer{
    @extend .close-icon;

    position: absolute;
    top:   0;
    right: 0;
    margin-top:   -#{map-get($close-icon, "padding")};
    margin-right: -#{map-get($close-icon, "padding")};
    padding: map-get($close-icon, "padding");
    display: inline-block;
    cursor: pointer;
    z-index: 1;

    &:hover{
        color: lighten(map-get($close-icon, "color"), 50%);
    }

    &:active{
        color: lighten(map-get($close-icon, "color"), 25%);
    }
}




/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/



/*
@example [HTML]
<button class="button"></button>
*/

.button{
    cursor: pointer;
    display: inline-block;
    white-space: nowrap;
    text-align: center;

    &[disabled]{
        @extend .disabled;
    }
}




/*------------------------------------*\
    #MODALS
\*------------------------------------*/



/*
@description

Simple modal.

@example [HTML]
<div class="modal">
    <div class="modal__inner">
        <span class="modal__close"></span>
    </div>
</div>


Apply a js-modal class to add functionality.

@example [HTML]
<div class="modal  js-modal">
    <div class="modal__inner">
        <span class="modal__close  js-modal__close"></span>
    </div>
</div>
*/

.modal{
    @include cover(true);
    z-index: map-get($z-index, "max");
}


.modal__inner{
    width: 100%;
    margin-left:  auto;
    margin-right: auto;
    position: relative;
    text-align: center;
}


.modal__close{
    @extend .close-icon;
    margin: 0;
}




/*------------------------------------*\
    #DROPDOWN
\*------------------------------------*/



/*
@description
Simple content dropdowns

@example [HTML]
<div class="dropdown">

    <div class="dropdown__summary  js-toggle" data-icon="+" data-icon-active="-" data-toggle="dropdown" toggle-parent></div>

    <div class="dropdown__content"></div>

</div>
*/

.dropdown{
    position: relative;
}


.dropdown__summary{
    display: inline-block;
    position: relative;
    user-select: none;

    &:after{
        content: attr(data-icon);
        position: absolute;
        right: 0;
        top:    0;
        bottom: 0;
    }
}


.dropdown__content{
    max-height: 0;
    overflow: hidden;
    -webkit-overflow-scrolling: touch;
    transition: map-get($transition-speed, "medium") map-get($transition-type, "ease");
}


.dropdown--toggled,
.dropdown--hover:hover,
.dropdown[aria-expanded="true"]{

    .dropdown__content{
        max-height: map-get($dropdown, "max-height");
        overflow-x: hidden;
        overflow-y: auto;
    }

    .dropdown__summary{

        &:after{
            content: attr(data-icon-active);
        }
    }
}




/*------------------------------------*\
    #DRAWERS
\*------------------------------------*/



/*
@description
Slide out from left or right drawers.

@example [HTML]
<div class='js-toggle' data-toggle='drawer--right'>Toggle</div>
<div class='drawer  drawer--right'></div>
<div class='drawer__overlay'></div>
*/

.drawer {
    position: fixed;
    top:    0;
    bottom: 0;
    overflow-y: auto;
    overflow-x: hidden;
    z-index: map-get($z-index, "drawer");
    background: map-get($drawer, "background");
    transition: transform map-get($drawer, "transition");
    padding: map-get($drawer, "padding");
    transform: translateZ(0);
    -webkit-overflow-scrolling: touch;
    width: map-get($drawer, "width");

    @include touch{
        position: absolute;
    }
}


.drawer--left{
    left: -#{map-get($drawer, "width")};
}


.drawer--right{
    right: -#{map-get($drawer, "width")};
}


// The overlay that appears when a drawer is open
.drawer__overlay{
    @include cover(true);
    opacity: 0;
    visibility: hidden;
    z-index: map-get($z-index, "drawerOverlay");
    transition: opacity map-get($drawer, "transition");
    background: map-deep-get($drawer, "overlay" "background");
}


.drawer--left--toggled,
.drawer--right--toggled{
    @extend .lock-scroll;

    .drawer__overlay{
        visibility: visible;
        opacity: 1;
    }
}


// Left drawer open state
.drawer--left--toggled{

    .drawer--left{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }

    .will-move{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }
}


// Right drawer open state
.drawer--right--toggled{

    .drawer--right{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }

    .will-move{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }
}


// Anything with this class will be
// pushed left or right when a drawer is open
.will-move{
    transition: transform map-get($drawer, "transition");
}
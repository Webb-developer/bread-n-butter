/*------------------------------------*\
    #TYPE
\*------------------------------------*/



.title--m{
    font-family:    map-deep-get($title, "m" "font-family");
    font-size:      map-deep-get($title, "m" "font-size");
    font-weight:    map-deep-get($title, "m" "font-weight");
    letter-spacing: map-deep-get($title, "m" "letter-spacing");
    line-height:    map-deep-get($title, "m" "line-height");
}


.title--l{
    font-family:    map-deep-get($title, "l" "font-family");
    font-size:      map-deep-get($title, "l" "font-size");
    font-weight:    map-deep-get($title, "l" "font-weight");
    letter-spacing: map-deep-get($title, "l" "letter-spacing");
    line-height:    map-deep-get($title, "l" "line-height");
}


.title--xl{
    font-family:    map-deep-get($title, "xl" "font-family");
    font-size:      map-deep-get($title, "xl" "font-size");
    font-weight:    map-deep-get($title, "xl" "font-weight");
    letter-spacing: map-deep-get($title, "xl" "letter-spacing");
    line-height:    map-deep-get($title, "xl" "line-height");
}


.title--xxl{
    font-family:    map-deep-get($title, "xxl" "font-family");
    font-size:      map-deep-get($title, "xxl" "font-size");
    font-weight:    map-deep-get($title, "xxl" "font-weight");
    letter-spacing: map-deep-get($title, "xxl" "letter-spacing");
    line-height:    map-deep-get($title, "xxl" "line-height");
}





/*------------------------------------*\
    #GRIDS
\*------------------------------------*/



/*
@description
This depends on modernizr no-flexbox class.
Apply the .grid class to any grids and .grid__item
to any grid items.
If the browser doesnt support flexbox we'll fallback to a floated grid.
if were using flexbox to create grids using createGrid()
*/

.no-flexbox{

    .grid{
        display: block;
        overflow: hidden;
    }

    .grid__item{
        float: left;
    }
}

/*
@description
Instructions for creating grids with createGrid()
For parameter descriptions find createGrid() in _bbui-functions.
When creating grids where the number of columns will change
on a breakpoint, set the number of columns mobile first.

@example
For a grid that goes from 1 to 2 columns:
@include createGrid(1, 2rem, "grid--1-2")
then create a media query independently to go from 100% to 50% width.

.grid--1-2__item{
    @include query("s"){
        width: 50%;
    }
}
*/

@include createGrid(2, 1.5rem, "grid--2");



@include createGrid(1, 1.5rem, "grid--1-2");


.grid--1-2__item{

    @include query("s"){
        width: 50%;
    }
}



@include createGrid(2, 1rem, "grid--2-4");


.grid--2-4__item{

    @include query("m"){
        width: 25%;
    }
}





/*------------------------------------*\
    #LOAD-BAR
\*------------------------------------*/



/*
@description
Functionality for this is in _bbjs-utilities.js

@example
<div class="load-bar"></div>
*/

.load-bar{
    position: fixed;
    top:  0;
    left: 0;
    z-index: map-get($z-index, "max");
    height: 3px;
    background-color: map-get($color, "black");
    transform: translateZ(0);
    transition: width 0.4s linear;
    
    &.done{
        visibility: hidden;
    }
}




/*------------------------------------*\
    #FORMS
\*------------------------------------*/



.label{
    display: block;
    color: map-get($color, "grey-75");
    margin-bottom: 4px;
}


.input{
    border: solid map-get($line-width, "s") rgba(0,0,0,0.2);
    padding: 0.3rem 0.8rem;
    color: map-get($color, "grey-75");
    transition: border-color map-get($transition-speed, "extra-fast") map-get($transition-type, "cubic");

    &:hover,
    &:focus{
        border-color: map-get($color, "grey-50");
    }
}


.input--error{
    background-color: map-get($color, "light-red");
}


.input--success{
    background-color: map-get($color, "light-green");
}




/*------------------------------------*\
    #ICONS
\*------------------------------------*/



/*
@example
<div class="menu-icon">
    <div class="menu-icon__line"></div>
    <div class="menu-icon__line"></div>
    <div class="menu-icon__line"></div>
</div>
*/

.menu-icon{
    width: map-get($hamburger, "width");
    padding: map-get($hamburger, "padding");
    cursor: pointer;
}


.menu-icon__line{
    background-color: map-deep-get($hamburger, "line" "background-color");
    height: map-deep-get($hamburger, "line" "height");
    margin-top: map-deep-get($hamburger, "line" "spacing");
    display: block;

    &:nth-of-type(1){
        margin-top: 0;
    }
}



.close-icon{
    position: absolute;
    top:   0;
    right: 0;
    margin-top:   -#{map-get($close-icon, "padding")};
    margin-right: -#{map-get($close-icon, "padding")};

    // Padding is for clickability, not for offset from corners.
    // Apply class of close-icon--no-icon to add offsets.
    padding: map-get($close-icon, "padding");
    display: inline-block;
    cursor: pointer;
    transition: transform map-get($transition-speed, "extra-fast") map-get($transition-type, "cubic");
    font-size: map-get($close-icon, "font-size");
    color: map-get($close-icon, "color");

    &:after{
        content: map-deep-get($close-icon, "icon" "symbol");
        font-size: inherit;
        line-height: map-deep-get($close-icon, "icon" "line-height");
        display: block;
    }

    &:hover{
        transform: scale3D(1.1, 1.1, 1.1);
    }

    &:active{
        transform: scale3D(0.9, 0.9, 0.9);
    }

    &.close-icon--to-left{
        right: inherit;
        left: 0;
    }

    &.close-icon--no-icon{

        &:after{
            display: none;
        }
    }

    &.close-icon--no-offset{
        margin: 0;
    }

}





/*------------------------------------*\
    #RULES & #BORDERS
\*------------------------------------*/



.hr{
    border:  none;
    outline: none;
    height: map-get($line-width, "s");
    display: block;
    background-color: map-get($color, "grey-20");
    margin-top:    0.4rem;
    margin-bottom: 0.4rem;
}


.hr--medium{
    height: map-get($line-width, "m");
}


.hr--thick{
    height: map-get($line-width, "l");
}


.hr--short{
    max-width: 100px;
}




/*------------------------------------*\
    #LISTS
\*------------------------------------*/



.list-item{
    display: inline-block;
    margin-right: map-get($spacing, "s");

    &:nth-last-child(1){
        margin-right: 0;
    }
}


.list-item--smaller{
    margin-right: map-get($spacing, "xs");
}


.list-item--larger{
    margin-right: map-get($spacing, "m");
}


.list-item--vertical{
    display: block;
    margin-bottom: map-get($spacing, "s");

    &:nth-last-child(1){
        margin-bottom: 0;
    }
}


.list-item--vertical--smaller{
    margin-bottom: map-get($spacing, "xs");
}


.list-item--vertical--larger{
    margin-bottom: map-get($spacing, "m");
}


.list-item--padded{
    padding: map-get($spacing, "s");
}


.list-item--padded--smaller{
    padding: map-get($spacing, "xs");
}


.list-item--padded--larger{
    padding: map-get($spacing, "m");
}





/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/



.button{
    cursor: pointer;
    border: solid map-get($button, "border-width") transparent;
    display: inline-block;
    white-space: nowrap;
    text-align: center;
    padding: map-deep-get($button, "base" "padding");
    height: map-deep-get($button, "base" "height");
    line-height: map-deep-get($button, "base" "line-height");

    &[disabled]{
        @extend %disabled;
    }
}



.button--short{
    height: map-deep-get($button, "short" "height");
    line-height: map-deep-get($button, "short" "line-height");
}


.button--tall{
    height: map-deep-get($button, "tall" "height");
    line-height: map-deep-get($button, "tall" "line-height");
}



.button--narrow{
    padding: map-deep-get($button, "narrow" "padding");
}


.button--wide{
    padding: map-deep-get($button, "wide" "padding");
}



.button--black{
    background-color: map-get($color, "black");
    color: map-get($color, "white");
    border-color: map-get($color, "black");
    transition: all map-get($transition-speed, "fast") map-get($transition-type, "linear");

    &:hover{
        background-color: map-get($color, "white");
        color: map-get($color, "black");
    }
}


.button--white{
    background-color: map-get($color, "white");
    color: map-get($color, "black");
    border-color: map-get($color, "black");
    transition: all map-get($transition-speed, "fast") map-get($transition-type, "linear");

    &:hover{
        background-color: map-get($color, "black");
        color: map-get($color, "white");
    }
}



/*------------------------------------*\
    #OVERLAY
\*------------------------------------*/



/*
@example
<div class="overlay__wrap">
    <div class="overlay">Overlay Content</div>
</div>
*/

.overlay__wrap{
    position: relative;

    &:hover{

        .overlay{
            opacity: 1;
            visibility: visible;
        }
    }
}


.overlay{
    position: absolute;
    left:   map-get($overlay, "offset");
    right:  map-get($overlay, "offset");
    top:    map-get($overlay, "offset");
    bottom: map-get($overlay, "offset");
    opacity: 0;
    visibility: hidden;
    transition: opacity map-get($transition-speed, "fast") map-get($transition-type, "linear");
    z-index: map-get($z-index, "overlay");
    padding: map-get($overlay, "padding");
    background-color: map-get($overlay, "background-color");
}




/*------------------------------------*\
    #WYSIWYG
\*------------------------------------*/


// @description
// Wrapper for user entered content to "reset" styles.

.wysiwyg{
    line-height: map-get($line-height, "l");

    h1, h2{
        margin-bottom: map-get($spacing, "l");
    }

    h3{
        margin-bottom: map-get($spacing, "m");
    }

    h4{
        margin-bottom: map-get($spacing, "s");
    }

    ol,
    ul{
        margin-bottom: map-get($spacing, "s");
        margin-left: map-get($spacing, "m");
    }

    ol{
        list-style-type: decimal;
    }

    ul{
        list-style-type: square;
    }

    p{
        margin-top: map-get($spacing, "s");
    }

    b,
    strong{
        font-family: map-get($font-family, "bold");
    }
}





/*------------------------------------*\
    #BREADCRUMBS
\*------------------------------------*/



.breadcrumb{
    display: inline-block;

    &:after{
        content: "|";
        display: inline-block;
        padding: 0 5px;
    }

    &:nth-last-of-type(1){

        &:after{
            display: none;
        }
    }
}




/*------------------------------------*\
    #MODALS
\*------------------------------------*/



.no-flexbox{
    
    // .modal__inner is no longer vertically centered
    // without flexbox support. We'll add some padding 
    // so its not too close to the top edge of the screen.
    // Alternatively, by wrapping the .modal__inner with two elements
    // in the markup and adding .center-table
    // and .center-table-cell classes to the respective elements,
    // you can center it.
    .modal{
        padding-top: 15%;
        display: block;
    }
}

/*
@example
<div class="modal">
            
    <div class="modal__inner">
        <span class="modal__close  js-modal-close"></span>
        Modal content
    </div>

</div>


Can be used in conjunction with Modals() in
bbjs-functions.js by applying a js-modal class to the modal.
Do this if you want to have the modal to appear on page load.

@example
<div class="modal  js-modal  invisible  transparent">
            
    <div class="modal__inner">
        <span class="modal__close  js-modal-close"></span>
        Modal content
    </div>

</div>
*/

.modal{
    background-color: fade-out($base-black, 0.5);
    z-index: map-get($z-index, "max");
    position: fixed;
    top:    0;
    left:   0;
    right:  0;
    bottom: 0;
    padding-left:  map-get($spacing, "s");
    padding-right: map-get($spacing, "s");
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
}


.modal__inner{
    background-color: map-get($color, "white");
    padding: map-get($spacing, "m");
    max-width: 500px;
    width: 100%;
    margin-left:  auto;
    margin-right: auto;
    position: relative;
    box-shadow: 0 2px 4px rgba(0,0,0,.2);
    text-align: center;
}


.modal__inner--warning{
    background-color: map-get($color, "light-yellow");
}


.modal__inner--error{
    background-color: map-get($color, "light-red");
}


.modal__inner--success{
    background-color: map-get($color, "light-green");
}


.modal__close{
    @extend .close-icon;
}




/*------------------------------------*\
    #DROPDOWN
\*------------------------------------*/



/*
@description
Simple content dropdowns

@example
<div class='dropdown'>
    <div class='dropdown__summary  js-toggle' data-tab='dropdown__content' use-parent="true">Toggle</div>
    <div class='dropdown__content'>Im some content</div>
</div>
*/

.dropdown{
    position: relative;
}


.dropdown__content--toggled{

    .dropdown__content{
        display: block;
    }
}


.dropdown__summary{
    display: inline-block;
    user-select: none;
}


.dropdown__content{
    display: none;
    margin-top: map-get($spacing, "s");
}


// Optional, to create a list like structure.
.dropdown__item{
    display: block;
    margin-top: map-get($spacing, "xs");

    &:nth-of-type(1){
        margin-top: 0;
    }
}





/*------------------------------------*\
    #TABS
\*------------------------------------*/


/*
@description
.tab__content should have a hidden class applied to it.
tabs functionality is in bbjs-utilities.js

@example
<div class='js-tab-toggle  tab__summary' data-tab='0'>Toggle</div>
<div class='js-tab-content  tab__content' data-tab='0'>Im some content</div>
*/

.tab__summary{
    cursor: pointer;
    display: inline-block;
    user-select: none;
    margin-right: map-get($spacing, "m");

    &:nth-last-of-type(1){
        margin-right: 0;
    }
}


.tab__content{
    margin-top: map-get($spacing, "s");
}



/*------------------------------------*\
    #DRAWERS
\*------------------------------------*/



/*
@description
Slide out from left or right drawers.

@example
<div class='js-toggle' data-toggle='drawer--right'>Toggle drawer</div>
<div class='drawer  drawer--right' data-tab='0'>Im a drawer</div>
*/

.drawer {
    position: fixed;
    top:    0;
    bottom: 0;
    overflow-y: auto;
    overflow-x: hidden;
    z-index: map-get($z-index, "drawer");
    background-color: map-get($color, "white");
    transition: transform map-get($transition-speed, "medium") map-get($transition-type, "cubic");
    padding: map-get($drawer, "padding");
    transform: translateZ(0);
    -webkit-overflow-scrolling: touch;
    width: map-get($drawer, "width");
    @extend .hidden-scrollbar;
}


.drawer--left{
    left: -#{map-get($drawer, "width")};
}


.drawer--right{
    right: -#{map-get($drawer, "width")};
}


// The overlay that appears when a drawer is open

.drawer__overlay{
    position: fixed;
    top:    0;
    bottom: 0;
    left:   0;
    right:  0;
    visibility: hidden;
    opacity: 0;
    transform: translateZ(0);
    z-index: map-get($z-index, "drawerOverlay");
    transition: opacity map-get($transition-speed, "medium") map-get($transition-type, "cubic");
    background-color: map-get($drawer, "overlayColor");
}


.drawer--left--toggled,
.drawer--right--toggled{

    .drawer__overlay{
        visibility: visible;
        opacity: 1;
    }
}


// left drawer open state

.drawer--left--toggled{

    .drawer--left{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }

    .will-move{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }
}


// right drawer open state

.drawer--right--toggled{

    .drawer--right{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }

    .will-move{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }
}


// Anything with this class will be 
// pushed left or right when a drawer is open

.will-move{
    transition: transform map-get($transition-speed, "medium") map-get($transition-type, "cubic");
}


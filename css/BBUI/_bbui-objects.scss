/*------------------------------------*\
    #GRIDS
\*------------------------------------*/



// Using modernizr no-flexbox class. You should
// apply the .grid class to any grids and .grid__item
// to any grid items.

// If the browser doesnt support flexbox
// we'll fallback to a floated grid.
// When creating grids using the createGrid

.no-flexbox{

    .grid{
        display: block;
        overflow: hidden;
    }

    .grid__item{
        float: left;
    }
}


// Instructions for creating grids with createGrid()

    // 1. For parameter descriptions find createGrid() in _bbui-functions.

    // 2. When creating grids where the number of columns will change
    //    on a breakpoint, set the number of columns mobile first.
    //    Ex: For a grid that goes from 1 to 2 columns:
    //    @include createGrid(1, 2rem, "grid--1-2")
    //    then create a media query independently to go from 100% to 50% width. Ex:
    /*    .grid--1-2__item{

                @media (min-width: 600px){
                    width: 50%;
                }
            }
    */


@include createGrid(2, 1.5rem, "grid--2");



@include createGrid(1, 1.5rem, "grid--1-2");


.grid--1-2__item{

    @media #{map-get($media-query, "s")}{
        width: 50%;
    }
}



@include createGrid(2, 1rem, "grid--2-4");


.grid--2-4__item{

    @media #{map-get($media-query, "m")}{
        width: 25%;
    }
}





/*------------------------------------*\
    #LOAD-BAR
\*------------------------------------*/



.load-progress-bar{
    position: fixed;
    top:  0;
    left: 0;
    z-index: map-get($z-index, "max");
    height: 3px;
    background-color: #000;
    transform: translateZ(0);
    transition: width 0.4s linear;
    
    // Functionality is in _bbjs-utilities.js
    &.done{
        visibility: hidden;
    }
}





/*------------------------------------*\
    #SEARCH
\*------------------------------------*/



.suggest-search__input{
    z-index: 1;
    position: relative;
}


.suggest-search__placeholder{
    position: absolute;
    left:   0;
    right:  0;
    top:    0;
    pointer-events: none;
    color: rgba(0,0,0,.3);
}


.suggest-search__placeholder,
.suggest-search__input{
    font-size: map-get($font-size, "base");
    text-transform: lowercase;
    text-align: left;
    padding: map-get($spacing, "s");
    white-space: nowrap;
    text-rendering: geometricPrecision;
}




/*------------------------------------*\
    #FORMS
\*------------------------------------*/



.label{
    display: block;
    color: map-get($color, "light-black");
    margin-bottom: 4px;
}


.input{
    border: solid map-get($line-width, "s") rgba(0,0,0,0.2);
    padding: 0.3rem 0.8rem;
    color: map-get($color, "light-black");
    transition: border-color map-get($transition-speed, "extra-fast") map-get($transition-type, "cubic");

    &:hover,
    &:focus{
        border-color: map-get($color, "grey-50");
    }
}


.input--warning{
    background-color: map-get($color, "light-yellow");
}


.input--error{
    background-color: map-get($color, "light-red");
}


.input--success{
    background-color: map-get($color, "light-green");
}




/*------------------------------------*\
    #ICONS & IMAGES
\*------------------------------------*/



.menu-icon{
    width: 30px;
    cursor: pointer;
}


.menu-icon__line{
    background: map-get($color, "black");
    height: 2px;
    margin-top: 4px;
    display: block;

    &:nth-of-type(1){
        margin-top: 0;
    }
}



.close-icon{
    position: absolute;
    top:   0;
    right: 0;
    margin-top:   -10px;
    margin-right: -10px;
    padding: 10px;
    display: inline-block;
    cursor: pointer;
    transition: transform map-get($transition-speed, "extra-fast") map-get($transition-type, "cubic");
    font-size: map-get($font-size, "l");
    color: map-get($color, "black");

    &:after{
        content: "Ã—";
        font-size: inherit;
        line-height: 0.558em;
        display: block;
    }

    &:hover{
        transform: scale3D(1.1, 1.1, 1.1);
    }

    &:active{
        transform: scale3D(0.9, 0.9, 0.9);
    }

}


.close-icon--no-icon{

    &:after{
        display: none;
    }
}




/*------------------------------------*\
    #LISTS
\*------------------------------------*/



.list-item{
    display: inline-block;
    margin-right: map-get($spacing, "s");

    &:nth-last-child(1){
        margin-right: 0;
    }
}


.list-item--smaller{
    margin-right: map-get($spacing, "xs");

    &:nth-last-child(1){
        margin-right: 0;
    }
}


.list-item--vertical{
    display: block;
    margin-left:  0;
    margin-right: 0;
    margin-bottom: map-get($spacing, "s");

    &:nth-last-child(1){
        margin-bottom: 0;
    }
}


.list-item--vertical--smaller{
    margin-bottom: map-get($spacing, "xs");

    &:nth-last-child(1){
        margin-bottom: 0;
    }
}


.list-item--padded{
    padding: map-get($spacing, "s");
}


.list-item--padded--smaller{
    padding: map-get($spacing, "xs");
}




/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/



.button{
    transition: all map-get($transition-speed, "extra-fast") map-get($transition-type, "cubic");
    cursor: pointer;
    padding: 0.3rem 0.8rem;

    &:active{
        transform: scale3D(0.9, 0.9, 0.9);
    }

    &[disabled]{
        @extend .disabled;
    }
}





/*------------------------------------*\
    #WYSIWYG
\*------------------------------------*/



.wysiwyg{
    line-height: map-get($line-height, "l");

    ol:not(.plain), ul:not(.plain){
        margin-bottom: map-get($spacing, "s");
        margin-left: map-get($spacing, "m");
    }

    ol, ul{
        line-height: map-get($line-height, "l");
    }

    ol:not(.plain){
        list-style-type: decimal;
    }

    ul:not(.plain){
        list-style-type: square;
    }

    p:not(.plain){
        margin-top: map-get($spacing, "s");
    }

    b:not(.plain), strong:not(.plain){
        font-family: map-get($font-family, "bold");
    }

    // Global h1-h3 styles are defined in _bbui-base
}





/*------------------------------------*\
    #BREADCRUMBS
\*------------------------------------*/



.breadcrumbs-item{
    display: inline-block;

    &:after{
        content: "|";
        display: inline-block;
        padding: 0 5px;
    }

    &:nth-last-of-type(1){

        &:after{
            display: none;
        }
    }

    &.active{
        text-decoration: underline;
    }
}




/*------------------------------------*\
    #MODALS
\*------------------------------------*/



.no-flexbox{
    
    // .modal__inner is no longer vertically centered
    // without flexbox support. We'll add some padding 
    // so its not too close to the top edge of the screen.
    // Alternatively, by wrapping the .modal__inner with two elements
    // in the markup and adding .center-table
    // and .center-table-cell classes to the respective elements,
    // you can center it.
    .modal{
        padding-top: 15%;
        display: block;
    }
}


.modal{
    background-color: fade-out($base-black, 0.5);
    z-index: map-get($z-index, "max");
    position: fixed;
    top:    0;
    left:   0;
    right:  0;
    bottom: 0;
    padding-left:  map-get($spacing, "s");
    padding-right: map-get($spacing, "s");
    display: flex;
    flex-direction: row;
    align-items: center;
}


.modal__inner{
    background-color: #fff;
    padding: map-get($spacing, "m");
    max-width: 500px;
    width: 100%;
    margin-left:  auto;
    margin-right: auto;
    position: relative;
    box-shadow: 0 2px 4px rgba(0,0,0,.2);
    text-align: center;
}


.modal__inner--info{
    background-color: map-get($color, "light-blue");
}


.modal__inner--warning{
    background-color: map-get($color, "light-yellow");
}


.modal__inner--error{
    background-color: map-get($color, "light-red");
}


.modal__inner--success{
    background-color: map-get($color, "light-green");
}


.modal__close{
    @extend .close-icon;
}





/*------------------------------------*\
    #DRAWERS
\*------------------------------------*/



// visually hidden drawer until activated via .js-drawer-open-* classes

.drawer {
    position: fixed;
    top:    0;
    bottom: 0;
    overflow-y: auto;
    overflow-x: hidden;
    z-index: map-get($z-index, "drawer");
    background-color: #fff;
    transition: transform map-get($transition-speed, "medium") map-get($transition-type, "cubic");
    padding: map-get($drawer, "padding");
    transform: translateZ(0);
    @extend .hidden-scrollbar;
    -webkit-overflow-scrolling: touch;
}


.drawer--left,
.drawer--right{
    width: map-get($drawer, "width");
}


.drawer--left{
    left: -#{map-get($drawer, "width")};
}


.drawer--right{
    right: -#{map-get($drawer, "width")};
}


// the overlay that appears when a drawer is open

.drawer__overlay{
    position: fixed;
    top:    0;
    bottom: 0;
    left:   0;
    right:  0;
    visibility: hidden;
    opacity: 0;
    transform: translateZ(0);
    z-index: map-get($z-index, "drawerOverlay");
    transition: opacity map-get($transition-speed, "medium") map-get($transition-type, "cubic");
    background-color: map-get($drawer, "overlayColor");
}


.drawer--left--toggled,
.drawer--right--toggled{

    .drawer__overlay{
        visibility: visible;
        opacity: 1;
    }
}


// left drawer open state

.drawer--left--toggled{

    .drawer--left{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }

    .will-move{
        transform: translateX(map-get($drawer, "width")) translateZ(0);
    }
}


// right drawer open state

.drawer--right--toggled{

    .drawer--right{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }

    .will-move{
        transform: translateX(-#{map-get($drawer, "width")}) translateZ(0);
    }
}


// anything with this class will be pushed left or right when a drawer is open

// left drawers will push it left
// right drawers will push it right

.will-move{
    transition: transform map-get($transition-speed, "medium") map-get($transition-type, "cubic");
}


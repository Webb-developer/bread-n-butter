/*------------------------------------*\
    #MIXINS
\*------------------------------------*/


// This mixin is for responsive font sizing
// Paramaters should be a font size listed in $font-size map

// Param 1 is mobile the font-size 
// Param 2 is desktop the font-size

// Not meant to be used for all font-sizing, 
// but for larger titles that dont adapt too well to REM sizing

@mixin fs($mobileSize, $desktopSize){
    font-size: map-get($font-size, #{$mobileSize});

    @media #{map-get($mediaQuery, "s")}{
        font-size: map-get($font-size, #{$desktopSize});
    }
}





// Mixin to preseve intrinsic aspect ratios.

// @param {number} width
// @param {number} height

// Ex: @include aspect-ratio(16, 9);

@mixin aspect-ratio($width, $height){
    position: relative;
    padding-top: ($height / $width) * 100%;
 
    .aspect-ratio__object{
        position: absolute;
        top:  0;
        left: 0;
        height: 100%;
        width:  100%;
    }
}




// This function takes a given map and iterates through the keys
// and creates css classes based on the key-value pairs.

// @param {string} property - the name of the property that will be outputted.

// @param {string} className - the classname that will be outputted, 
// suffixed with "--" then the value of the property. Ex: text-decoration--none
// The suffix is for a BEM like structure.

// @param {map} map - the SASS map where we get the data from
// and iterate through the key-value pairs.

// Usage: @include createClassesFromMap(font-family, font-family, $font-family);

@mixin createClassesFromMap($property, $className, $map){

    @each $key, $value in $map{

        @if $value != '' {
            
            .#{$className} {
            
                &--#{$key}{
                    #{$property}: $value !important;
                }
            }
            
        }

    }
}



@mixin createMQClassesFromMap($property, $className, $map){

    @each $key, $value in $map{

        @each $MQKey, $MQValue in $mediaQuery{
            
            @media #{$MQValue}{
                
                .#{$className}--#{$key}-on-#{$MQKey}{
                    #{$property}: $value !important;
                }
            }
        }
    }
}





@mixin createNumberClasses($property, $className, $iterations){
    
    @for $i from 1 through $iterations{
        
        .#{$className}--#{$i}{
            #{$property}: ($i * 100% / $iterations) !important;
        }
    }
}



@mixin createMQNumberClasses($property, $className, $iterations){
    
    @for $i from 1 through $iterations{

        @each $MQKey, $MQValue in $mediaQuery{
            
            @media #{$MQValue}{

                .#{$className}--#{$i}-on-#{$MQKey}{
                    #{$property}: ($i * 100% / $iterations) !important;
                }
            }
        }
    }
}




@mixin createIncrementalNumberClasses($property, $className, $increment, $max){

    @for $i from 1 through $max{

        $val: ($i * $increment);

        .#{$className}--#{$val}{
            #{$property}: #{$val}px !important;
        }
    }

}


@mixin createMQIncrementalNumberClasses($property, $className, $increment, $max){

    @for $i from 1 through $max{

        $val: ($i * $increment);
        
        @each $MQKey, $MQValue in $mediaQuery{
            
            @media #{$MQValue}{

                .#{$className}--#{$val}-on-#{$MQKey}{
                    #{$property}: #{$val}px !important;
                }
            }
        }
    }

}


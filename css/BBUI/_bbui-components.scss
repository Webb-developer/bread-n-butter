/*
@name components

@guide
Components should have multiple jobs. They are compound.
By themselves, components dont form any elements,
they help form them. 
*/


/*------------------------------------*\
    #GRIDS
\*------------------------------------*/



/*
@name .no-flexbox

@description
This depends on modernizr no-flexbox class.
Apply the .grid class to any grids and .grid__item
to any grid items.
If the browser doesnt support flexbox we'll fallback to a floated grid.
if were using flexbox to create grids using createGrid()
*/

.no-flexbox{

    .grid{
        display: block;

        // clearfix
        overflow: hidden;
    }

    .grid__item{
        float: left;
    }
}



/*
@description
Instructions for creating grids with createGrid()
For parameter descriptions find createGrid() in _bbui-functions.
When creating grids where the number of columns will change
on a breakpoint, set the number of columns mobile first.

@example
For a grid that goes from 1 to 2 columns
create a media query in the block to go from 100% to 50% width.

@include createGrid(1, 2rem, "grid--1-2"){
    @include query("s"){
        width: 50%;
    }
}
*/

@include createGrid(2, 1.5rem, "grid--2");



@include createGrid(1, 1.5rem, "grid--1-2"){

    @include query("s"){
        width: 50%;
    }

}



@include createGrid(2, 1rem, "grid--2-4"){

    @include query("m"){
        width: 25%;
    }

}




/*
See bbui-functions.scss for usage.
*/

@include createGridUnits(1.53846154);





/*------------------------------------*\
    #TABLES
\*------------------------------------*/



.center-table{
    display: table;
    table-layout: fixed;
    height: 100%;
    width:  100%;
    text-align: center;
}


.center-table-cell{
    display: table-cell;
    vertical-align: middle;
    height: 100%;
}




/*------------------------------------*\
    #DISPLAYS
\*------------------------------------*/



.display-center-flex{
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
}



.hidden{
    display: none !important;
    speak: none;
}




/*------------------------------------*\
    #MISC-SPACING
\*------------------------------------*/



.mlr--auto{
    margin-left:  auto;
    margin-right: auto;
}





/*------------------------------------*\
    #TEXT
\*------------------------------------*/



.clip-text{
    white-space: nowrap;
    text-overflow: clip;
    overflow: hidden;
}


.clip-text--ellipsis{
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}





/*------------------------------------*\
    #VISIBILITY
\*------------------------------------*/



.visually-hidden{
    visibility: hidden;
    opacity: 0;
}


.visually-visible{
    visibility: visible;
    opacity: 1;
}


// Reference the percent "classes" when
// using SASS's @extend to avoid file bloat.

%visually-hidden{
    visibility: hidden;
    opacity: 0;
}


%visually-visible{
    visibility: visible;
    opacity: 1;
}




/*------------------------------------*\
    #MEDIA
\*------------------------------------*/



.bg-image--cover{
    background-size: cover;
    background-repeat: no-repeat;
}


.bg-image--contain{
    background-size: contain;
    background-repeat: no-repeat;
}


.bg-image--cover--center{
    background-size: cover;
    background-repeat: no-repeat;
    background-position: 50% 50%;
}



// Maintain intrinsic aspect ratios.

.aspect-ratio--16-9{
    @include aspect-ratio(16, 9);
}


.aspect-ratio--4-5{
    @include aspect-ratio(4, 5);
}


.aspect-ratio--1-1{
    @include aspect-ratio(1, 1);
}


.aspect-ratio__object{
    position: absolute;
    top:  0;
    left: 0;
    height: 100%;
    width:  100%;
}


.aspect-ratio__object--cover{
    object-fit:      cover;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: 50% 50%;
    object-position:     50% 50%;
}




/*------------------------------------*\
    #STATES
\*------------------------------------*/



.disabled{
    opacity: 0.5;
    pointer-events: none;
}


%disabled{
    opacity: 0.5;
    pointer-events: none;
}


// Expects to be on the HTML element.
.scroll-locked{
    height: 100%;
    overflow-y: hidden;

    body{
        height: 100%;
        overflow-y: hidden;
    }
}


%scroll-locked{
    height: 100%;
    overflow-y: hidden;

    body{
        height: 100%;
        overflow-y: hidden;
    }
}




/*------------------------------------*\
    #MISC
\*------------------------------------*/



// data-toggle attributes are used in _bbjs-utilities.js

[data-toggle]{
    cursor: pointer;
}

